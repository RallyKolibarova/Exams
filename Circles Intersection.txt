using System;
using System.Linq;
using System.Collections.Generic;
using System.Globalization;

class IntersactionOfCircles
{
	public static void Main (string[] args)
	{
		int[] firstCircle = Console.ReadLine ().Split ()
			.Select (int.Parse).ToArray ();
		int[] secondCircle = Console.ReadLine ().Split ()
			.Select (int.Parse).ToArray ();

		Point centerA = new Point () {
			X = firstCircle [0],
			Y = firstCircle [1]
		};
		Point centerB = new Point () {
			X = secondCircle [0],
			Y = secondCircle [1]
		};

		Circle circleA = new Circle () {
			Center = centerA,
			Radius = firstCircle [2]
		};
		Circle circleB = new Circle () {
			Center = centerB,
			Radius = secondCircle [2]
		};

		if (Intersect (circleA, circleB)) {
			Console.WriteLine ("Yes");
		} else {
			Console.WriteLine ("No");
		}

	}
	static bool Intersect(Circle c1, Circle c2)
	{
		double distanceetweenCenters = CalcDistance (c1.Center, c2.Center);
		double sumOfRadiuses = c1.Radius + c2.Radius;
		if (distanceetweenCenters > sumOfRadiuses) {
			return false;
		}
		return true;
	}


	static double CalcDistance(Point a, Point b)
	{
		double deltaX = b.X - a.X;
		double deltaY = b.Y - a.Y;
		double distance = Math.Sqrt (deltaX * deltaX + deltaY * deltaY);
		return distance;
	}

}
class Circle
{
	public Point Center { get; set;}
	public int Radius{ get; set;}
}

class Point
{
	public int X{ get; set;}
	public int Y{ get; set;}
}